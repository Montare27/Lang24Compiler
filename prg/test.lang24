# Quicksort issue. Recursive calling

i: int

main(): int = {
    i = 10;
    recursive();
    return i;
}

recursive(): void = {
    #if i == 0 then return none;

    i = i - 1;
    if i != 0 then {
        recursive();
     #   recursive();
    }

    return none;
}


## Heapsort issue. Calling nested functions - uninitialized memory in parameters

#main(): int = {
#    return test(50, 20);
#}


#test(x: int, y: int) :int = {
#    return test2(x);
#} {

#    test2(n: int): int ={
#        return test3(n);
#    }
#    {
#        test3(t: int): int ={
#            return y;
#        }
#    }


#}








## Test static array
#
#arr: [101]int
#x: int
#
#test(t: int) : int = {
#    return t;
#}
#
#main() : int = {
#
#    i = 0;
#    arr[i] = 17;
#    while i < 100:{
#        arr[i] = i;
#        x = arr[i] ;
#        i = i + 1;
#    }
#
#    #i = arr[i];
#    arr[0];
#    arr[1];
#    test(arr[3]);
#    return test(arr[i - 1]);
#
#    #arr[0] = 2;
#    #arr[1] = 4;
#    #arr[2] = 8;
#    #arr[3] = 16;
#    #arr[4] = 32;
#    #return test(^arr);
#} {i: int}


# Test local array. Works!

#test(x: ^[5]int) : int = {
#    x^[0];
#    x^[1];
#    x^[2];
#    x^[3];
#    return x^[4];
#}
#
#main() : int = {
#
#    arr[0] = 2;
#    arr[1] = 4;
#    arr[2] = 8;
#    arr[3] = 16;
#    arr[4] = 32;
#    return test(^arr);
#} {
#
#    arr: [5]int
#}





# everything works fine

#test(x: ^int) : int = {
#
#    return x^;
#}
#
#main() : int = {
#
#    i = 32;
#    return test(^i);
#} {
#
#    i: int
#}

# Exception.
# Takes only the first element
#test(arr: ^[10]int) : int = {
#    arr^[0];
#    arr^[1];
#    arr^[2];
#    arr^[3];
#    arr^[4];
#
#
#    return arr^[7];
#}
#
#main() : int = {
#
#
#   k = 0;
#   i = 10;
#
#   while k < 10: {
#       a[k] = i;
#       k = k + 1;
#       i = i * 2;
#   }
#
#   return test(^a);
#
#} {
#    k: int
#    i: int
#    a: [10]int
#}


